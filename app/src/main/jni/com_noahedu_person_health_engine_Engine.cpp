/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_noahedu_person_health_engine_Engine */
#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>


#include "com_noahedu_person_health_engine_Engine.h"
#include "swt_handler.h"
#include "util.h"
static jobject convertWriterContent(JNIEnv *env,jclass clsPackageInfo ,jclass clsItem ,T_SyncWriterHandler * handler,T_WriterItem * t_writer,const char* cachefile);

//共用
char * getMediaPath(JNIEnv *env, const char * dir, const char * name,int type);
//共用
void writeCacheData(const char * path, char * data, int length);
/*
 * Class:     com_noahedu_person_health_engine_Engine
 * Method:    nativeOpenPackages
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_noahedu_person_health_engine_Engine_nativeOpenPackages
  (JNIEnv * env, jclass thiz, jstring filePath)
{
	Swt_Handler * handler = NULL;
	if(filePath != NULL)
	{
		const char *file = env->GetStringUTFChars(filePath, NULL);

		LOGD("SWT_InitSyncWriterContent %s %d",file,__LINE__);
		if(file != NULL) {
				handler = Swt_Handler::getHandler(file);
		}
		LOGD("SWT_InitSyncWriterContent %s %d",file,__LINE__);

		env->ReleaseStringUTFChars(filePath, file);
	}
	jint hd = com_noahedu_person_health_engine_Engine_INVALID_BOOK_HANDLER;
	if(handler != NULL)
	{
		hd = handler->hd;
	}
	LOGD("SWT_InitSyncWriterContent hd = %d,%d",hd,__LINE__);
	return hd;
}

/*
 * Class:     com_noahedu_person_health_engine_Engine
 * Method:    nativeClosePackages
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_noahedu_person_health_engine_Engine_nativeClosePackages
  (JNIEnv *env , jclass thiz , jint hd)
  {
	Swt_Handler * handler = Swt_Handler::findHandler(hd);
	Swt_Handler::releaseHandler(handler);
  }

/*
 * Class:     com_noahedu_person_health_engine_Engine
 * Method:    nativeReadContent
 * Signature: (ILjava/lang/String;)[Lcom/noahedu/person/health/engine/Content;
 */
JNIEXPORT jobjectArray JNICALL Java_com_noahedu_person_health_engine_Engine_nativeReadContent
  (JNIEnv * env, jclass thiz, jint hd, jstring cacheDir)
  {
	Swt_Handler * swt_handler = Swt_Handler::findHandler(hd);

	const char *cachefile = env->GetStringUTFChars(cacheDir, NULL);


	LOGD("nativeReadContent %d,0x%08x",__LINE__,swt_handler);
	if(swt_handler == NULL) {
		return NULL;
	}
	LOGD("nativeReadContent %d,0x%08x",__LINE__,swt_handler);
	T_SyncWriterHandler * handler = swt_handler->t_handler;
	LOGD("nativeReadContent %d,0x%08x",__LINE__,handler);
	if(handler == NULL)
	{
		return NULL;
	}
	T_WriterItem* t_writeritem = NULL;

	int count = handler->maincount;
	LOGD("nativeReadContent %d,%d",__LINE__,count);
	jclass clsPackageInfo = env->FindClass( "com/noahedu/person/health/engine/Content");
	jobjectArray jobjArray = (jobjectArray)env->NewObjectArray(count, clsPackageInfo, NULL);

	jobject result = NULL;

	jclass clsItem = env->FindClass( "com/noahedu/person/health/engine/Content$Item");

	//总共有多少类别，获取类别内容
	for(int i = 0; i < count ;i++)
	{
		t_writeritem = GetWriterItem(handler,i);
		//t_writeritem->cacheFile = getMediaPath(env,cachefile,t_writeritem->title);
		//writeCacheData(t_writeritem->cacheFile,t_writeritem->pic->pic,t_writeritem->pic->len);
		result = convertWriterContent(env,clsPackageInfo,clsItem,handler,t_writeritem,cachefile);
		env->SetObjectArrayElement(jobjArray, i,result);
		env->DeleteLocalRef(result);
	}

    env->DeleteLocalRef(clsItem);
    env->DeleteLocalRef(clsPackageInfo);
	env->ReleaseStringUTFChars(cacheDir, cachefile);
	return jobjArray;
  }

static jobject convertWriterContent(JNIEnv *env,jclass clsPackageInfo ,jclass clsItem ,T_SyncWriterHandler * handler,T_WriterItem * t_writer,const char* cachefile)
{
	jobject result = NULL;

	if(t_writer == NULL) {
			return NULL;
	}

	LOGW("convertWriterContent  line is %d!t_writer->itemCount:%d,t_writer->itemOrder:%d\n", __LINE__,t_writer->itemCount,t_writer->itemOrder);
	//jclass clsPackageInfo = env->FindClass( "com/noahedu/person/health/engine/Content");
	jfieldID fldtype = env->GetFieldID(clsPackageInfo, "type", "I");
	jfieldID flditemCount = env->GetFieldID(clsPackageInfo, "itemCount", "I");
	jfieldID flditemOrder = env->GetFieldID(clsPackageInfo, "itemOrder", "I");
	jfieldID fldtitle = env->GetFieldID(clsPackageInfo, "title", "Ljava/lang/String;");
	jfieldID fldCache = env->GetFieldID(clsPackageInfo, "cacheFile", "Ljava/lang/String;");
	jfieldID fldItems = env->GetFieldID(clsPackageInfo, "items", "[Lcom/noahedu/person/health/engine/Content$Item;");
	jfieldID fldlogo = env->GetFieldID(clsPackageInfo,"logo","[B");
	LOGW("convertWriterContent  line is %d!\n", __LINE__);

	//jclass clsItem = env->FindClass( "com/noahedu/person/health/engine/Content$Item");
	jfieldID fldstage = env->GetFieldID(clsItem, "stage", "I");
	jfieldID fldname = env->GetFieldID(clsItem, "name", "Ljava/lang/String;");
	jfieldID fldVideoId = env->GetFieldID(clsItem, "videoId", "Ljava/lang/String;");
	jfieldID fldItemCache = env->GetFieldID(clsItem, "cacheFile", "Ljava/lang/String;");
	jfieldID fldquestNum = env->GetFieldID(clsItem, "questNum", "I");
	jfieldID fldItemtype = env->GetFieldID(clsItem, "type", "I");
	jfieldID fldquestOrder = env->GetFieldID(clsItem, "questOrder", "I");
	jfieldID fldItemLogoAddr = env->GetFieldID(clsItem, "logoAddr", "I");
	jfieldID fldItemlogo = env->GetFieldID(clsItem,"logo","[B");

	LOGW("convertWriterContent  line is %d!\n", __LINE__);
	result = env->AllocObject(clsPackageInfo);
	if(result == NULL) {
		return NULL;
	}

	jobjectArray contents = env->NewObjectArray(t_writer->itemCount, clsItem, NULL);
	LOGW("convertWriterContent  line is %d!\n", __LINE__);
	for(uint i=0; i < t_writer->itemCount; i++) {

		LOGW("convertWriterContent  content is %d!\n", __LINE__);
		T_Item * media = GetChildrenItem(handler,t_writer->itemCount,t_writer->itemOrder,i);
		media->cacheFile = getMediaPath(env,cachefile,media->name,media->pic->type);

		LOGW("convertWriterContent  content is %d!\n", __LINE__);
		if(media != NULL) {
			LOGW("convertWriterContent  content is %d!\n", __LINE__);

			jobject objMedia = env->AllocObject(clsItem);
			if(objMedia != NULL) {
				env->SetIntField(objMedia, fldstage, media->stage);
				env->SetIntField(objMedia, fldquestNum, media->questCount);
				env->SetIntField(objMedia, fldquestOrder, media->questOrder);
				env->SetObjectField(objMedia, fldname, GBK2UTF8(env, media->name));
				env->SetObjectField(objMedia, fldVideoId, GBK2UTF8(env, media->videoId));
				env->SetObjectField(objMedia, fldItemCache, GBK2UTF8(env, media->cacheFile));
				env->SetIntField(objMedia, fldItemLogoAddr, media->picAddr);

				if(media->pic != NULL)
				{
					writeCacheData(media->cacheFile,media->pic->pic,media->pic->len);
					LOGW("convertWriterContent  writeCacheData is %d!\n", __LINE__);
					jbyteArray logo = copyArray(env, (char *)media->pic->pic,media->pic->len);
					env->SetObjectField(objMedia,fldItemlogo,logo);
					env->SetIntField(objMedia,fldItemtype,media->pic->type);
					env->DeleteLocalRef(logo);//删除局部引用
				}
				LOGD("convertWriterContent  name:%s,videoId:%s\n",GBK2UTF8(env, media->name), GBK2UTF8(env, media->videoId));
			}

			env->SetObjectArrayElement(contents, i, objMedia);

			env->DeleteLocalRef(objMedia);//删除局部变量

			SWT_ReleaseItem(media);
		}
		else
		{
			LOGD("convertWriterContent  name %d",__LINE__);
		}

	}

	env->SetIntField(result, flditemCount, t_writer->itemCount);
	env->SetIntField(result, flditemOrder, t_writer->itemOrder);
	env->SetObjectField(result,fldtitle,GBK2UTF8(env, t_writer->title));
	env->SetObjectField(result, fldItems, contents);
	env->SetObjectField(result, fldCache, GBK2UTF8(env, t_writer->cacheFile));
	//设置图片数据
	if(t_writer->pic !=NULL)
	{
		jbyteArray logo = copyArray(env, (char *)t_writer->pic->pic,t_writer->pic->len);

		env->SetObjectField(result, fldlogo, logo);
		env->SetIntField(result,fldtype,t_writer->pic->type);

		env->DeleteLocalRef(logo);//删除局部引用
	}

	LOGW("convertWriterContent  content is %d!\n", __LINE__);
	//直接释放writer指针，不需要了
	SWT_ReleaseWriterItem(t_writer);

	env->DeleteLocalRef(contents);//删除局部引用

	LOGD("convertWriterContent  name %d",__LINE__);
	return result;
}
/*
 * Class:     com_noahedu_person_health_engine_Engine
 * Method:    nativeGetPictureInfo
 * Signature: (ILjava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_noahedu_person_health_engine_Engine_nativeGetPictureInfo
  (JNIEnv *env, jclass thiz, jint hd, jstring cacheFile, jint logoAddr)
{
	Swt_Handler * swt_handler = Swt_Handler::findHandler(hd);

	LOGD("nativeReadContent %d,0x%08x",__LINE__,swt_handler);
	if(swt_handler == NULL) {
		return NULL;
	}
	LOGD("nativeReadContent %d,0x%08x",__LINE__,swt_handler);
	T_SyncWriterHandler * handler = swt_handler->t_handler;
	LOGD("nativeReadContent %d,0x%08x",__LINE__,handler);
	if(handler == NULL)
	{
		return NULL;
	}
	const char *cachefile = env->GetStringUTFChars(cacheFile, NULL);

	//获取图片
	 T_Picture *pic = SWT_GetPicInfo(handler,handler->picOffset,logoAddr);


	jbyteArray logo = copyArray(env, (char *)pic->pic,pic->len);

	writeCacheData(cachefile,pic->pic,pic->len);

	env->ReleaseStringUTFChars(cacheFile, cachefile);

	return logo;
}

/*
 *转换名字为Utf编码
 *name
 *dir
 */
char * getMediaPath(JNIEnv *env, const char * dir, const char * name,int type)
{
	char * path = NULL;

	jstring strName = GBK2UTF8(env, name);

	const char * utfName = env->GetStringUTFChars(strName, NULL);

	const int dirLen = strlen(dir);
	if(dirLen <= 0) {
		LOGW("Dir is empty!");
		return NULL;
	}
	char tmp[] = ".jpg";
	switch(type)
	{
	case 1:
		sprintf(tmp,"%s",".jpg");
		break;
	case 2:
		sprintf(tmp,"%s",".png");
		break;
	case 3:
		sprintf(tmp,"%s",".bmp");
		break;
	case 4:
		sprintf(tmp,"%s",".gif");
		break;
	}

	jstring jsuffix = GBK2UTF8(env, tmp);

	const char * suffix = env->GetStringUTFChars(jsuffix, NULL);

	const int len = dirLen + strlen(utfName)+strlen(suffix)+ 2;
	path = (char *)MALLOC(len);
	if(path == NULL) {
		OOM(len);
		return NULL;
	}

	memset(path, 0, len);

	if(dir[dirLen-1] == '/') {
		sprintf(path, "%s%s%s", dir, utfName,suffix);
	} else {
		sprintf(path, "%s/%s%s", dir, utfName,suffix);
	}

	LOGD("path:%s\n", path);
	env->ReleaseStringUTFChars(jsuffix,tmp);
	env->ReleaseStringUTFChars(strName, utfName);

	return path;
}
/*
 * 写缓存数据
 *
 */
void writeCacheData(const char * path, char * data, int length)
{
	FILE * fp = fopen(path, "wb");
	if(fp == NULL) {
		LOGW("Create file(%s) failed!\n", path);
		return;
	}

	int result = fwrite(data, 1, length, fp);
	if(result != length) {
		LOGW("%s:File write error! Expected %d but return %d\n", __FUNCTION__, length, result);
	}

	fclose(fp);

	// 改变文件权限
	chmod(path, S_IRWXU | S_IRGRP | S_IROTH);

	if(access(path, R_OK) != 0) {
		LOGE("Access file(%s) failed!\n", path);
	}
}
